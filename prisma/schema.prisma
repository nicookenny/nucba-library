// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

//ADMIN o CLIENT
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  role      Role
  balance   Float
  profile   Profile? @relation()
  loans     Loan[]
  purchases Sell[]
}

model Profile {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  dni       String
  phone     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  address   Address? @relation()
}

model Address {
  id        String  @id @default(uuid())
  street    String
  number    Int
  zipCode   String
  floor     Int
  apartment String
  city      String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

// BOOKS
model Book {
  id         Int                @id @default(autoincrement())
  title      String
  synopsis   String
  type       String
  sellPrice  Float
  loanPrice  Float
  author     Author             @relation(fields: [authorId], references: [id])
  authorId   Int
  editorials EditorialBooks[]
  categories categories_books[]
  loans      Loan[]
  sells      Sell[]
}

model Author {
  id          Int    @id @default(autoincrement())
  name        String
  nationality String
  books       Book[]
}

model Editorial {
  id    Int              @id @default(autoincrement())
  name  String
  phone String
  email String
  books EditorialBooks[]
}

model EditorialBooks {
  book        Book      @relation(fields: [bookId], references: [id])
  bookId      Int
  editorial   Editorial @relation(fields: [editorialId], references: [id])
  editorialId Int
  stock       Int

  @@id([bookId, editorialId])
}

model categories_books {
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId     Int
  categories Category @relation(fields: [categoryID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryID Int

  @@id([bookId, categoryID])
}

model Category {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  books       categories_books[]
}

// LOANS y SELLS
model Loan {
  id      String     @id @default(uuid())
  date    DateTime
  dueDate DateTime
  user    User       @relation(fields: [userId], references: [id])
  userId  String
  book    Book       @relation(fields: [bookId], references: [id])
  bookId  Int
  cost    Float
  status  LoanStatus @default(PENDING)
}

model Sell {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  book   Book     @relation(fields: [bookId], references: [id])
  bookId Int
  amount Float
  date   DateTime
}

enum LoanStatus {
  PENDING
  RETURNED
  NOT_RETURNED
}
