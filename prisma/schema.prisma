// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

//ADMIN o CLIENT
model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  role Role

  balance Float

  profile Profile? @relation()

  loans     Loan[]
  purchases Sell[]
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstname String
  lastname  String

  dni   String
  phone String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  address Address? @relation()
}

model Address {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  street  String
  number  Int
  zipCode String

  floor     Int
  apartment String

  city String

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

// BOOKS
model Book {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  synopsis String
  type     String

  sellPrice Float
  loanPrice Float

  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  editorials EditorialBooks[]

  categories    Category[] @relation(fields: [categoriesIds], references: [id])
  categoriesIds String[]   @db.ObjectId

  loans Loan[]
  sells Sell[]
}

model Author {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  nationality String

  books Book[]
}

model Editorial {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  phone String
  email String

  books EditorialBooks[]
}

model EditorialBooks {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  book        Book      @relation(fields: [bookId], references: [id])
  bookId      String
  editorial   Editorial @relation(fields: [editorialId], references: [id])
  editorialId String

  stock Int
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String

  books    Book[]   @relation(fields: [booksIds], references: [id])
  booksIds String[] @db.ObjectId
}

// LOANS y SELLS
model Loan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  date    DateTime
  dueDate DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  cost Float

  status LoanStatus @default(PENDING)
}

model Sell {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String

  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  amount Float

  date DateTime
}

enum LoanStatus {
  PENDING
  RETURNED
  NOT_RETURNED
}
